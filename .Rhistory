}
}
Fib <- function(n) {
fib <- c(rep(NA), n)
fib[1:2] <- 1
sapply(3:n) function(i) {
fib[i] <- fib[i-2] + fib[i-2]
}
}
Fib <- function(n) {
fib <- c(rep(NA), n)
fib[1:2] <- 1
sapply(3:n) function(i) fib[i] <- fib[i-2] + fib[i-2]
}
Fib <- function(n) {
fib <- c(rep(NA), n)
fib[1:2] <- 1
sapply(3:n, function(i) fib[i] <- fib[i-2] + fib[i-2]
}
Fib <- function(n) {
fib <- c(rep(NA), n)
fib[1:2] <- 1
sapply(3:n, function(i) fib[i] <- fib[i-2] + fib[i-2])
}
Fib(10)
Fib <- function(n) {
fib <- c(rep(NA), n)
fib[1:2] <- 1
sapply(3:n, function(i) fib[i] <- fib[i-1] + fib[i-2])
}
Fib(10)
fib <- c(rep(NA), 10)
fib[1:2] <- 1
sapply(3:10, function(i) fib[i] <- fib[i-1] + fib[i-2])
fib <- c(rep(NA), 10)
fib
fib <- rep(NA, 10)
fib <- rep(NA, 10)
fib
fib[1:2] <- 1
fib
sapply(3:10, function(i) fib[i] <- fib[i-1] + fib[i-2])
fib
sapply(3:10, function(i) {
fib <- rep(NA, 10)
fib[1:2] <- 1
fib[i] <- fib[i-1] + fib[i-2]
}
fib
fib
sapply(3:10, function(i) {
fib <- rep(NA, 10)
fib[1:2] <- 1
fib[i] <- fib[i-1] + fib[i-2]
}
)
sapply(3:10, function(i) {
fib <- rep(NA, 10)
fib <- fib[1:2] = 1
fib[i] <- fib[i-1] + fib[i-2]
}
)
sapply(3:10, function(i) {
fib[i] <- fib[i-1] + fib[i-2]
}
)
Fib <- function(n) {
fib <- rep(NA, n)
fib[1:2] <- 1
sapply(3:n, function(i) {
fib[i] <- fib[i-1] + fib[i-2]
}
)
}
Fib(10)
library(sfsmisc)
library(cubature)
library(pracma)
library(lattice)
### We want to integrate this function
mixDist <- function(x){
(.8*dnorm(x, mean=1, sd=1)+.2*dnorm(x, mean=-1, sd=.4))
}
### What does it look like?
curve(from=-3, to=4, mixDist, n=1000)
### What is the area under the curve between -2 and 2?
ans <- .8*(pnorm(2, mean=1, sd=1)-pnorm(-2, mean=1, sd=1))+
.2*(pnorm(2, mean=-1, sd=.4)-pnorm(-2, mean=-1, sd=.4))
ans
### Let's draw that
segments(-2, 0, -2, mixDist(-2), lwd=2)
segments(2, 0, 2, mixDist(2), lwd=2)
cord.x <- c(-2,seq(-2,2,0.01),2)
cord.y <- c(0,mixDist(seq(-2,2,0.01)),0)
polygon(cord.x,cord.y,col='skyblue')
##### Let's try a couple of different methods to integrate this
## Trapezoids
n <- 101
x <- seq(-2, 2, len = n)
y <- mixDist(x)
trapz(x, y)
trapz(x, y)-ans
integrate(mixDist, -2, 2)
integrate(mixDist, -2, 2)$value -ans
### Fixed Gauss-Hermite quadrature
points <- seq(from=-2, to=2, length=40)
integrate.xy(points, mixDist(points))
integrate.xy(points, mixDist(points))-ans
### Monte Carlo Integration
mcInt <- function(ftn, a, b, n){
u <- runif(n, a, b)
x <- sapply(u, ftn)
return(mean(x)*(b-a))
}
mcInt(mixDist, -2, 2, 10000)
mcInt(mixDist, -2, 2, 10000)-ans
##### Now let's add dimensions
dimensions=2
ndraws=1000
vals <- matrix(rnorm(2*1000), ncol=dimensions, nrow=ndraws)
library(mvtnorm)
probs <- dmvnorm(vals, mean=rep(0, dimensions), sigma=diag(rep(1, dimensions)))
total <- data.frame(cbind(probs, vals))
colnames(total) <- (c("probs", "V1", "V2"))
cloud(probs~V1*V2, data=total)
###
myNorm <- function(x){
dmvnorm(x, mean=rep(0, dimensions), sigma=diag(rep(1, dimensions)))
}
## Calculate the actual answer
ans <- pmvnorm(upper=rep(.5, dimensions), mean=rep(0, dimensions), sigma=diag(rep(1, dimensions)))
ans <- as.numeric(ans)
ans
## Quadrature again
adaptIntegrate(myNorm, lowerLimit=rep(-100, dimensions), upperLimit=rep(.5, dimensions))
adaptIntegrate(myNorm, lowerLimit=rep(-100, dimensions), upperLimit=rep(.5, dimensions))$integral -ans
install.packages("mvtnorm")
dimensions=2
ndraws=1000
vals <- matrix(rnorm(2*1000), ncol=dimensions, nrow=ndraws)
library(mvtnorm)
probs <- dmvnorm(vals, mean=rep(0, dimensions), sigma=diag(rep(1, dimensions)))
total <- data.frame(cbind(probs, vals))
colnames(total) <- (c("probs", "V1", "V2"))
cloud(probs~V1*V2, data=total)
###
myNorm <- function(x){
dmvnorm(x, mean=rep(0, dimensions), sigma=diag(rep(1, dimensions)))
}
## Calculate the actual answer
ans <- pmvnorm(upper=rep(.5, dimensions), mean=rep(0, dimensions), sigma=diag(rep(1, dimensions)))
ans <- as.numeric(ans)
ans
## Quadrature again
adaptIntegrate(myNorm, lowerLimit=rep(-100, dimensions), upperLimit=rep(.5, dimensions))
adaptIntegrate(myNorm, lowerLimit=rep(-100, dimensions), upperLimit=rep(.5, dimensions))$integral -ans
### Monte Carlo Integration
mcInt <- function(ftn, a, b, n, dimensions){
u <- runif(n*dimensions, a, b)
these <- matrix(u, ncol=dimensions)
x <- apply(these,1, ftn)
return(mean(x)*(b-a)^dimensions)
}
mcInt(myNorm, -4, .5, n=100000, dimensions=2)-ans
install.packages("EMBAforecast")
install.packages("EMBAforecast")
install.packages("EMBAforecast")
install.packages("EBMAforecast")
library(EBMAforecast)
library(EBMAforecast)
remove.packages("EBMAforecast")
# Jacob Hample
# Professor Montgomery
# Applied Statistical Programming
# Midterm Exam
library(devtools)
library(roxygen2)
# devtools
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
# Creates vectors containing x & y values of a mathematical function
x <- seq(1, 25, length.out = 25)
y <- (x-10)^2 + 5
# S3 Trapezoidal Rule
trap <- function(x, y, a, b) {
n <- length(x) - 1
h <- (x[length(x)] - x[1]) / n
X <- seq(a, b, by = h)
y.indices <- which(round(x, 5) %in% round(X, 5))
Y <- y[y.indices]
n <- length(X) - 1
estInt <- h/2 * (Y[1] + sum(2*Y[2:n]) + Y[n+1])
return(estInt)
}
trap(x, y, 4, 22)
# Print method
print.trap <- function(x, y, a, b) {
estInt <- trap(x, y, a, b)
print(estInt)
}
print.trap(x, y, 4, 22)
library(devtools); library(roxygen2); library(testthat)
setwd("~/Documents/GitHub/EBMAforecast1/rcpp_pack")
## Only need to run this portion once
# update_collate("EBMAforecast")
current.code <- as.package("EBMAforecast")
library(devtools); library(roxygen2); library(testthat)
setwd("~/Documents/GitHub/EBMAforecast1/rcpp_pack")
remove.packages("integrateItRevised")
library(devtools)
library(roxygen2)
library(integrateItRevised)
example.x <- 1:25
example.y <- (example.x)^2
integrateIt("Trap", example.x, example.y, 4, 22)
integrateIt("Simp", example.x, exapmle.y, 4, 22)
integrateIt("Simp", example.x, example.y, 4, 22)
length(example.x)
example.x <- 1:24
example.y <- (example.x)^2
integrateIt("Simp", example.x, example.y, 4, 22)
example.trap <- integrateIt("Trap", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 22)
print(example.trap)
print(example.simp)
plot(example.trap)
print(integrateIt("Trap", example.x, example.y, 4, 21))
print(integrateIt("Trap", example.x, example.y, 4, 22))
print(integrateIt("Trap", example.x, example.y, 4, 20))
print(integrateIt("Simp", example.x, example.y, 4, 21))
remove.packages("integrateItRevised")
library(devtools)
library(roxygen2)
library(integrateItRevised)
example.x <- 1:25
example.y <- (example.x)^2
example.trap <- integrateIt("Trap", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 22)
print(example.trap)
plot(example.trap)
print(example.simp)
print(integrateIt("Simp", example.x, example.y, 4, 21))
print(integrateIt("Simp", example.x, example.y, 14, 2))
example.y <- example.y[-example.y[25]]
example.y <- example.y[-example.y[25]]
example.y <- c(1,4,9)
print(integrateIt("Simp", example.x, example.y, 4, 22))
example.y <- rep(NA, 25)
print(integrateIt("Simp", example.x, example.y, 4, 22))
example.y <- as.numeric(example.y)
print(integrateIt("Simp", example.x, example.y, 4, 22))
remove.packages("integrateItRevised")
library(devtools)
library(roxygen2)
library(integrateItRevised)
example.x <- 1:25
example.y <- (example.x)^2
example.trap <- integrateIt("Trap", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 22)
print(example.trap)
plot(example.trap)
print(example.simp)
print(integrateIt("Simp", example.x, example.y, 4, 21))
print(integrateIt("Simp", example.x, example.y, 4, 20))
print(integrateIt("Trap", example.x, example.y, 4, 20))
print(integrateIt("Trap", example.x, example.y, 4, 21))
remove.packages("integrateItRevised")
library(devtools)
library(roxygen2)
library(integrateItRevised)
example.x <- 1:25
example.y <- (example.x)^2
example.trap <- integrateIt("Trap", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 22)
print(example.trap)
plot(example.trap)
print(example.simp)
dnorm(example.x)
example.x == sort(example.x)
exampSimp<-integrateIt("Trap", tryx, tryy, -5, 5)
tryx<-seq(-5, 4.99, by=.95)
length(tryx)
tryy<-dnorm(tryx)
exampSimp<-integrateIt("Trap", tryx, tryy, -5, 5)
exampTrap<-integrateIt("Simp", tryx, tryy, -5, 5)
print(exampTrap)
plot(exampTrap)
print(exampSimp)
remove.packages("integrateItRevised")
library(devtools)
library(roxygen2)
library(integrateItRevised)
example.x <- 1:25
example.y <- dnorm
example.trap <- integrateIt("Trap", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 22)
library(devtools)
library(roxygen2)
library(integrateItRevised)
example.x <- 1:25
example.y <- (example.x)^2
example.trap <- integrateIt("Trap", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 22)
as.logical(all(object@x)) == as.logical(all(sort(object@x)))
as.logical(all(example.x)) == as.logical(all(sort(example.x)))
is.logical(as.logical(all(example.x)) == as.logical(all(sort(example.x))))
is.logical(all(example.x) == all(sort(example.x)))
is.double(example.x)
is.double(example.x[1])
class(example.x)
class(as.numeric(example.x))
remove.packages("integrateItRevised")
library(devtools)
library(roxygen2)
library(integrateItRevised)
example.x <- 1:25
example.y <- (example.x)^2
example.trap <- integrateIt("Trap", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 22)
remove.packages("integrateItRevised")
library(devtools)
library(roxygen2)
library(integrateItRevised)
example.x <- 1:25
example.y <- (example.x)^2
example.trap <- integrateIt("Trap", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 22)
print(example.trap)
plot(example.trap)
print(example.simp)
print(integrateIt("Simp", example.x, example.y, 4, 21))
tryx<-seq(-5, 4.99, by=.95)
tryy<-dnorm(tryx)
exampSimp<-integrateIt("Trap", tryx, tryy, -5, 5)
exampTrap<-integrateIt("Simp", tryx, tryy, -5, 5)
print(exampTrap)
plot(exampTrap)
print(exampSimp)
library(devtools)
library(roxygen2)
library(integrateItRevised)
example.x <- 1:25
example.y <- (example.x)^2
example.trap <- integrateIt("Trap", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 22)
print(example.trap)
plot(example.trap)
print(example.simp)
print(integrateIt("Simp", example.x, example.y, 4, 21))
print(integrateIt("Simp", example.x, example.y, 21, 4))
remove.packages("integrateItRevised")
library(devtools)
library(roxygen2)
library(integrateItRevised)
example.x <- 1:25
example.y <- (example.x)^2
example.trap <- integrateIt("Trap", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 21)
remove.packages("integrateItRevised")
library(devtools)
library(roxygen2)
library(integrateItRevised)
example.x <- 1:25
example.y <- (example.x)^2
example.trap <- integrateIt("Trap", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 22)
print(example.trap)
plot(example.trap)
print(example.simp)
print(integrateIt("Simp", example.x, example.y, 4, 21))
remove.packages("integrateItRevised")
library(devtools)
library(roxygen2)
library(integrateItRevised)
example.x <- 1:25
example.y <- (example.x)^2
example.trap <- integrateIt("Trap", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 22)
print(example.trap)
plot(example.trap)
print(example.simp)
print(integrateIt("Simp", example.x, example.y, 4, 21))
example.x <- c(1,5,3,7)
example.y <- (example.x)^2
example.trap <- integrateIt("Trap", example.x, example.y, 1, 7)
library(devtools)
library(roxygen2)
library(integrateItRevised)
tryx<-seq(-5, 4.99, by=.95)
tryy<-dnorm(tryx)
exampSimp<-integrateIt("Trap", tryx, tryy, -5, 5)
exampTrap<-integrateIt("Simp", tryx, tryy, -5, 5)
all(tryx == sort(tryx))
all(tryy == sort(tryy))
tryy
sort(tryy)
library(devtools)
library(roxygen2)
library(integrateItRevised)
example.x <- 1:25
example.y <- (example.x)^2
example.trap <- integrateIt("Trap", example.x, example.y, 4, 22)
example.simp <- integrateIt("Simp", example.x, example.y, 4, 22)
print(example.trap)
plot(example.trap)
print(example.simp)
print(integrateIt("Simp", example.x, example.y, 4, 21))
tryx<-seq(-5, 4.99, by=.95)
tryy<-dnorm(tryx)
exampSimp<-integrateIt("Trap", tryx, tryy, -5, 5)
exampTrap<-integrateIt("Simp", tryx, tryy, -5, 5)
print(exampTrap)
plot(exampTrap)
print(exampSimp)
library(devtools)
library(roxygen2)
library(integrateItRevised)
tryx<-seq(-5, 4.99, by=.95)
tryy<-dnorm(tryx)
exampSimp<-integrateIt("Trap", tryx, tryy, -5, 5)
exampTrap<-integrateIt("Simp", tryx, tryy, -5, 5)
print(exampTrap)
plot(exampTrap)
traceback()
remove.packages("integrateItRevised")
library(devtools)
library(roxygen2)
library(integrateItRevised)
tryx<-seq(-5, 4.99, by=.95)
tryy<-dnorm(tryx)
exampSimp<-integrateIt("Trap", tryx, tryy, -5, 5)
exampTrap<-integrateIt("Simp", tryx, tryy, -5, 5)
print(exampTrap)
plot(exampTrap)
traceback()
debug(plot)
debug(plot())
setMethod("plot", "Trapezoid",
function(x, y = NULL) {
obj <- x
browser()
n <- length(obj@x) - 1
h <- (obj@x[length(obj@x)] - obj@x[1]) / n
X <- seq(obj@a, obj@b, by = h)
y.indices <- which(round(obj@x, 5) %in% round(X, 5))
Y <- obj@y[y.indices]
n <- length(X) - 1
plot(NULL, xlim = c(min(X) - 1, max(X) + 1), ylim = c(min(Y) - 1, max(Y) + 1),
main = "Trapezoids", xlab = "X Values", ylab = "Y Values")
sapply(1:X[n], function(i) segments(X[i], Y[i], X[i + 1], Y[i + 1]))
segments(X[1], 0, X[n + 1], 0)
sapply(1:X[n + 1], function(i) segments(X[i], 0, X[i], Y[i]))
}
)
plot(exampTrap)
plot(exampTrap)
x
plot(exampTrap)
x
x@x
obj
x<-obj
ob
obj
obj
plot(exampTrap)
current.code <- as.package("integrateItRevised")
load_all(current.code)
document(current.code)
plot(exampTrap)
current.code <- as.package("integrateItRevised")
load_all(current.code)
document(current.code)
plot(exampTrap)
#' @export
setMethod("plot", "Trapezoid",
function(x, y = NULL) {
obj <- x
browser()
n <- length(obj@x) - 1
h <- (obj@x[length(obj@x)] - obj@x[1]) / n
X <- seq(obj@a, obj@b, by = h)
y.indices <- which(round(obj@x, 5) %in% round(X, 5))
Y <- obj@y[y.indices]
n <- length(X) - 1
plot(NULL, xlim = c(min(X) - 1, max(X) + 1), ylim = c(min(Y) - 1, max(Y) + 1),
main = "Trapezoids", xlab = "X Values", ylab = "Y Values")
sapply(1:X[n], function(i) segments(X[i], Y[i], X[i + 1], Y[i + 1]))
segments(X[1], 0, X[n + 1], 0)
sapply(1:X[n + 1], function(i) segments(X[i], 0, X[i], Y[i]))
}
)
plot(exampTrap)
x
y
x
traceback(plot(exampTrap))
debug(plot)
plot(exampTrap)
undebug(plot)
remove.packages("integrateItRevised")
library(devtools)
library(roxygen2)
setwd("~/Desktop/integrateItRevised")
#package.skeleton("integrateItRevised")
rm(list=ls())
current.code <- as.package("integrateItRevised")
load_all(current.code)
document(current.code)
build(current.code, path="~/Desktop/integrateItRevised")
